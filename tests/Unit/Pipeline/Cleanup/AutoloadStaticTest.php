<?php

namespace BrianHenryIE\Strauss\Pipeline\Cleanup;

use BrianHenryIE\Strauss\Helpers\FileSystem;
use BrianHenryIE\Strauss\TestCase;
use League\Flysystem\Config;
use League\Flysystem\InMemory\InMemoryFilesystemAdapter;
use Psr\Log\NullLogger;

/**
 * @coversDefaultClass \BrianHenryIE\Strauss\Pipeline\Cleanup\AutoloadStatic
 */
class AutoloadStaticTest extends TestCase
{
    public function test_add_autoload_static_file_to_true_composer(): void
    {

        $phpString = <<<'EOD'
<?php

// autoload_static.php @generated by Composer

namespace Composer\Autoload;

class ComposerStaticInitc0c8c3c3a7923b0c6fd76b5d3318025a
{
    public static $prefixLengthsPsr4 = array (
        'c' => 
        array (
            'chillerlan\\Settings\\' => 20,
            'chillerlan\\QRCode\\' => 18,
        ),
    );

    public static $prefixDirsPsr4 = array (
        'chillerlan\\Settings\\' => 
        array (
            0 => __DIR__ . '/..' . '/chillerlan/php-settings-container/src',
        ),
        'chillerlan\\QRCode\\' => 
        array (
            0 => __DIR__ . '/..' . '/chillerlan/php-qrcode/src',
        ),
    );

    public static $classMap = array (
        'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php',
    );

    public static function getInitializer(ClassLoader $loader)
    {
        return \Closure::bind(function () use ($loader) {
            $loader->prefixLengthsPsr4 = ComposerStaticInitc0c8c3c3a7923b0c6fd76b5d3318025a::$prefixLengthsPsr4;
            $loader->prefixDirsPsr4 = ComposerStaticInitc0c8c3c3a7923b0c6fd76b5d3318025a::$prefixDirsPsr4;
            $loader->classMap = ComposerStaticInitc0c8c3c3a7923b0c6fd76b5d3318025a::$classMap;

        }, null, ClassLoader::class);
    }
}
EOD;
        $inMemoryFilesystem = new InMemoryFilesystemAdapter();

        $filesystem = new Filesystem(
            new \League\Flysystem\Filesystem(
                $inMemoryFilesystem,
                [
                    Config::OPTION_DIRECTORY_VISIBILITY => 'public',
                ],
                new \Elazar\Flystream\StripProtocolPathNormalizer()
            )
        );

        $filesystem->write('vendor/composer/autoload_static.php', $phpString);

        $config = \Mockery::mock(\BrianHenryIE\Strauss\Config\CleanupConfigInterface::class);
        $config->expects()->getVendorDirectory()->andReturns('vendor/');

        $sut = new AutoloadStatic(
            '/',
            $config,
            $filesystem,
            new NullLogger()
        );

        $sut->cleanupAutoloadStatic();

        $after = $filesystem->read('vendor/composer/autoload_static.php');


        $this->markTestIncomplete();
    }
}
