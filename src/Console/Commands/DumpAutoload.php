<?php

namespace CoenJacobs\Mozart\Console\Commands;

use Composer\Autoload\ClassMapGenerator;
use Exception;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

class DumpAutoload extends Command
{
    private $config;

    protected function configure(): void
    {
        $this->setName('dump-autoload');
        $this->setDescription('Generates a classmap from files in the Mozart classmap and dep directories.');
        $this->setHelp('');
    }

    protected function readConfig(): object
    {
        $workingDir = getcwd();

        $composerFile = $workingDir . DIRECTORY_SEPARATOR . 'composer.json';
        if (! file_exists($composerFile)) {
            throw new Exception('No composer.json found at current directory: ' . $workingDir);
        }

        $composer = json_decode(file_get_contents($composerFile));
        // If the json was malformed.
        if (! is_object($composer)) {
            throw new Exception('Unable to parse composer.json read at: ' . $workingDir);
        }

        // if `extra` is missing or not an object or if it does not have a `mozart` key which is an object.
        if (! isset($composer->extra) || ! is_object($composer->extra)
             || ! isset($composer->extra->mozart) || ! is_object($composer->extra->mozart)) {
            throw new Exception('Mozart config not readable in composer.json at extra->mozart');
        }
        $config = $composer->extra->mozart;

        $config->dep_namespace = preg_replace("/\\\{2,}$/", "\\", "$config->dep_namespace\\");

        return $config;
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        try {
            $this->config = $this->readConfig();
        } catch (Exception $e) {
            $output->write($e->getMessage());

            return 1;
        }

        return $this->generateClassmapAutoloader();
    }

    /**
     * Write a classmap to file iun each of the classmap_directory and dep_directory.
     *
     * Uses Composer's `ClassMapGenerator::createMap()` to scan the directories for classes and generate the map.
     *
     * createMap() returns the full local path, so we then replace the root of the path with a variable.
     *
     * @see ClassMapGenerator::dump()
     *
     */
    private function generateClassmapAutoloader(): int
    {

        // Hyphen used to match WordPress Coding Standards.
        $output_filename = "autoload-classmap.php";

        $classmap_directory = getcwd()
                              . DIRECTORY_SEPARATOR
                              . ltrim($this->config->classmap_directory, DIRECTORY_SEPARATOR);

        $dep_directory = getcwd()
                         . DIRECTORY_SEPARATOR
                         . ltrim($this->config->dep_directory, DIRECTORY_SEPARATOR);

        $dirs = array(
            $classmap_directory,
            $dep_directory
        );

        foreach ($dirs as $dir) {
            if (!is_dir($dir)) {
                continue;
            }

            $dirMap = ClassMapGenerator::createMap($dir);

            $dirname = preg_replace('/[^a-z]/i', '', str_replace(getcwd(), '', $dir));

            array_walk(
                $dirMap,
                function (&$filepath, $class) use ($dir, $dirname) {
                    $filepath = "\${$dirname} . '"
                                . DIRECTORY_SEPARATOR
                                . ltrim(str_replace($dir, '', $filepath), DIRECTORY_SEPARATOR) . "'";
                }
            );

            ob_start();

            echo "<?php\n\n";
            echo "// {$output_filename} @generated by Mozart\n\n";
            echo "\${$dirname} = dirname(__FILE__);\n\n";
            echo "return array(\n";
            foreach ($dirMap as $class => $file) {
                echo "   '{$class}' => {$file},\n";
            }
            echo ");";

            file_put_contents($dir . $output_filename, ob_get_clean());
        }

        return 0;
    }
}
